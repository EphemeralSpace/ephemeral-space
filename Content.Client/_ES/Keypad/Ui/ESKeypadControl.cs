using System.Text;
using Content.Client.Message;
using Content.Client.Power.EntitySystems;
using Content.Shared._ES.Keypad.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._ES.Keypad.Ui;

[GenerateTypedNameReferences]
public sealed partial class ESKeypadControl : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    private readonly ISawmill _logger;

    private EntityUid? _uid;

    public Color UnpoweredColor { get; set; } = Color.FromHex("#313131");

    public ESKeypadControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _logger = Logger.GetSawmill("es_keypad_control");

        CanKeyboardFocus = true;
        KeyboardFocusOnClick = true;
        MouseFilter = MouseFilterMode.Stop;

        GrabKeyboardFocus();

        Button1.OnPressed += _ => PressKey('1');
        Button2.OnPressed += _ => PressKey('2');
        Button3.OnPressed += _ => PressKey('3');
        Button4.OnPressed += _ => PressKey('4');
        Button5.OnPressed += _ => PressKey('5');
        Button6.OnPressed += _ => PressKey('6');
        Button7.OnPressed += _ => PressKey('7');
        Button8.OnPressed += _ => PressKey('8');
        Button9.OnPressed += _ => PressKey('9');
        Button0.OnPressed += _ => PressKey('0');

        ButtonC.OnPressed += _ => PressClearKey();
        ButtonReturn.OnPressed += _ => PressSubmitKey();

        _entityManager.System<ESKeypadSystem>().OnCurrentCodeUpdated += ent =>
        {
            if (ent != _uid)
                return;
            UpdateKeypadScreen();
        };

        _entityManager.System<ESKeypadSystem>().OnLockedUpdated += ent =>
        {
            if (ent != _uid)
                return;
            UpdateKeypadIndicator();
        };
    }

    protected override void TextEntered(GUITextEnteredEventArgs args)
    {
        base.TextEntered(args);

        _logger.Debug($"text typed: {args.Text}");

        switch (args.TextEnteredEvent.Text)
        {
            case "0":
                PressKey('0');
                break;
        }
    }

    public void SetEntity(EntityUid uid)
    {
        _uid = uid;
        UpdateKeypadScreen();
        UpdateKeypadIndicator();
    }

    private void PressKey(char key)
    {
        if (_uid is not { } uid)
        {
            _logger.Error("No associated keypad entity!");
            return;
        }

        _entityManager.RaisePredictiveEvent(new ESKeypadPressKeyEvent(_entityManager.GetNetEntity(uid), key));
        UpdateKeypadScreen();
    }

    private void PressClearKey()
    {
        if (_uid is not { } uid)
        {
            _logger.Error("No associated keypad entity!");
            return;
        }

        _entityManager.RaisePredictiveEvent(new ESKeypadClearEvent(_entityManager.GetNetEntity(uid)));
        UpdateKeypadScreen();
    }

    private void PressSubmitKey()
    {
        if (_uid is not { } uid)
        {
            _logger.Error("No associated keypad entity!");
            return;
        }

        _entityManager.RaisePredictiveEvent(new ESKeypadSubmitEvent(_entityManager.GetNetEntity(uid)));
        UpdateKeypadScreen();
        UpdateKeypadIndicator();
    }

    private void UpdateKeypadScreen()
    {
        if (!_entityManager.TryGetComponent<ESKeypadComponent>(_uid, out var keypad))
        {
            _logger.Error("Unable to retrieve keypad component");
            return;
        }

        if (!_entityManager.System<PowerReceiverSystem>().IsPowered(_uid.Value))
        {
            InputLabel.SetMessage(string.Empty);
            return;
        }

        var sb = new StringBuilder();
        for (var i = 0; i < keypad.CodeLength; i++)
        {
            var ch = keypad.CodeInput.Length > i ? keypad.CodeInput[i] : '_';
            sb.Append(ch);
            sb.Append(' ');
        }

        InputLabel.SetMarkup(Loc.GetString("es-keypad-ui-current-code-label", ("code", sb.ToString().TrimEnd())));
    }

    private void UpdateKeypadIndicator()
    {
        if (!_entityManager.TryGetComponent<ESKeypadComponent>(_uid, out var keypad))
        {
            _logger.Error("Unable to retrieve keypad component");
            return;
        }

        if (!_entityManager.System<PowerReceiverSystem>().IsPowered(_uid.Value))
        {
            LockedIndicator.Modulate = UnpoweredColor;
            return;
        }

        LockedIndicator.Modulate = keypad.Locked ? keypad.LockedColor : keypad.UnlockedColor;
    }
}

