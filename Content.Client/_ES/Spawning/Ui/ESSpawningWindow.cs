using System.Linq;
using System.Numerics;
using Content.Client.GameTicking.Managers;
using Content.Client.Lobby;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared._ES.Spawning;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._ES.Spawning.Ui;

[GenerateTypedNameReferences]
public sealed partial class ESSpawningWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly JobRequirementsManager _jobRequirements = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;

    private readonly ClientGameTicker _gameTicker;
    private readonly SpriteSystem _sprites;

    public ESSpawningWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprites = _entitySystem.GetEntitySystem<SpriteSystem>();
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();

        StationList.OnItemSelected += args =>
        {
            OnStationSelected((NetEntity) StationList[args.ItemIndex].Metadata!);
        };

        Rebuild();
        _jobRequirements.Updated += Rebuild;
        _gameTicker.LobbyJobsAvailableUpdated += _ => Rebuild();
    }

    private void Rebuild()
    {
        StationList.Clear();
        var items = new List<ItemList.Item>();
        foreach (var (stationEnt, stationName) in _gameTicker.StationNames)
        {
            items.Add(new ItemList.Item(StationList)
            {
                Text = stationName,
                Metadata = stationEnt,
            });
        }
        StationList.SetItems(items);

        if (StationList.Count != 0)
            OnStationSelected((NetEntity) StationList[0].Metadata!);
    }

    private void OnStationSelected(NetEntity station)
    {
        StationNameLabel.Text = _gameTicker.StationNames[station];

        JobContainer.Children.Clear();
        var buttons = new List<ESJobButton>();
        foreach (var (jobId, count) in _gameTicker.JobsAvailable[station])
        {
            var job = _prototypeManager.Index(jobId);

            var button = new ESJobButton(job, count, _prototypeManager, _sprites);
            button.OnPressed += _ =>
            {
                var ev = new ESSpawnPlayerEvent(station, jobId);
                _entityManager.EntityNetManager.SendSystemNetworkMessage(ev);
                Close();
            };

            // Gratuitous copypasta start here
            if (!_jobRequirements.IsAllowed(job, (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter, out var reason))
            {
                button.Disabled = true;

                if (!reason.IsEmpty)
                {
                    var tooltip = new Tooltip();
                    tooltip.SetMessage(reason);
                    button.TooltipSupplier = _ => tooltip;
                }

                button.AddChild(new TextureRect
                {
                    TextureScale = new Vector2(0.4f, 0.4f),
                    Stretch = TextureRect.StretchMode.KeepCentered,
                    Texture = _sprites.Frame0(new SpriteSpecifier.Texture(new ("/Textures/Interface/Nano/lock.svg.192dpi.png"))),
                    HorizontalExpand = true,
                    HorizontalAlignment = HAlignment.Right,
                });
            }
            else if (count == 0)
            {
                button.Disabled = true;
            }
            // Gratuitous copypasta end here

            buttons.Add(button);
        }

        foreach (var child in buttons.OrderByDescending(b => b.Job.Weight))
        {
            JobContainer.AddChild(child);
        }
    }
}

public sealed class ESJobButton : ContainerButton
{
    public Label JobAmountLabel { get; }

    public JobPrototype Job;

    public ESJobButton(JobPrototype job, int? amount, IPrototypeManager protoMan, SpriteSystem sys)
    {
        Job = job;

        HorizontalExpand = true;
        VerticalExpand = true;

        var box = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true,
        };

        var icon = new TextureRect
        {
            TextureScale = new Vector2(2, 2),
            VerticalAlignment = VAlignment.Center,
        };
        icon.Texture = sys.Frame0(protoMan.Index(job.Icon).Icon);

        var jobNameLabel = new Label
        {
            Text = job.LocalizedName,
            Margin = new Thickness(5f, 0, 20, 0),
            HorizontalExpand = true,
        };

        JobAmountLabel = new Label
        {
            HorizontalAlignment = HAlignment.Right,
        };

        RefreshLabel(amount);

        box.AddChild(icon);
        box.AddChild(jobNameLabel);
        box.AddChild(JobAmountLabel);
        AddChild(box);
        AddStyleClass("button");
    }

    public void RefreshLabel(int? amount)
    {
        JobAmountLabel.Text = amount != null
            ? Loc.GetString("es-spawn-menu-job-slot-capped", ("amount", amount))
            : Loc.GetString("es-spawn-menu-job-slot-uncapped");
    }
}

