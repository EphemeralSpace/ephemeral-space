using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
// ES START
using Content.Client._ES.Spawning;
using Content.Client._ES.Spawning.Ui;
using Content.Shared._ES.CCVar;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
// ES END

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    public GhostTargetWindow TargetWindow { get; }

    public event Action? RequestWarpsPressed;
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRolesPressed;
    private int _prevNumberRoles;

// ES START
    private ESSpawningWindow? _esSpawningWindow;
// ES END
    public GhostGui()
    {
        RobustXamlLoader.Load(this);

        TargetWindow = new GhostTargetWindow();

        MouseFilter = MouseFilterMode.Ignore;

        GhostWarpButton.OnPressed += _ => RequestWarpsPressed?.Invoke();
        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesButton.StyleClasses.Remove(StyleBase.ButtonCaution);
// ES START
        IoCManager.Resolve<IConfigurationManager>().OnValueChanged(ESCVars.ESRespawnEnabled, val => ESRespawnButton.Visible = val, true);
        ESRespawnButton.OnPressed += _ =>
        {
            _esSpawningWindow ??= new ESSpawningWindow();
            _esSpawningWindow.OpenCentered();
        };
// ES END
    }

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    public void Update(int? roles, bool? canReturnToBody)
    {
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;

        if (roles != null)
        {
            GhostRolesButton.Text = Loc.GetString("ghost-gui-ghost-roles-button", ("count", roles));

            if (roles > _prevNumberRoles)
            {
                GhostRolesButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }

            _prevNumberRoles = (int)roles;
        }

        TargetWindow.Populate();
    }
// ES START
    private IEntityManager? _esEntityManager;
    private IGameTiming? _esGameTiming;

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        if (!ESRespawnButton.Visible)
            return;
        _esEntityManager ??= IoCManager.Resolve<IEntityManager>();
        _esGameTiming ??= IoCManager.Resolve<IGameTiming>();

        var spawning = _esEntityManager.System<ESSpawningSystem>();
        var timeRemaining = spawning.GetLocalRespawnTime() - _esGameTiming.CurTime;
        ESRespawnButton.Disabled = timeRemaining > TimeSpan.Zero;
        ESRespawnButton.Text = Loc.GetString("es-respawn-ghost-gui-button", ("time", Math.Max(Math.Ceiling(timeRemaining.TotalSeconds), 0)));
    }
// ES END

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }
}
